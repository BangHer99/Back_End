// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	admin "be12/mentutor/features/admin"

	mock "github.com/stretchr/testify/mock"
)

// RepoInterface is an autogenerated mock type for the RepoInterface type
type RepoInterface struct {
	mock.Mock
}

// DeleteClass provides a mock function with given fields: id
func (_m *RepoInterface) DeleteClass(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserMentee provides a mock function with given fields: id
func (_m *RepoInterface) DeleteUserMentee(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserMentor provides a mock function with given fields: id
func (_m *RepoInterface) DeleteUserMentor(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditClass provides a mock function with given fields: input
func (_m *RepoInterface) EditClass(input admin.ClassCore) (admin.ClassCore, error) {
	ret := _m.Called(input)

	var r0 admin.ClassCore
	if rf, ok := ret.Get(0).(func(admin.ClassCore) admin.ClassCore); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(admin.ClassCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(admin.ClassCore) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditUserMentee provides a mock function with given fields: input
func (_m *RepoInterface) EditUserMentee(input admin.UserCore) (admin.UserCore, error) {
	ret := _m.Called(input)

	var r0 admin.UserCore
	if rf, ok := ret.Get(0).(func(admin.UserCore) admin.UserCore); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(admin.UserCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(admin.UserCore) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditUserMentor provides a mock function with given fields: input
func (_m *RepoInterface) EditUserMentor(input admin.UserCore) (admin.UserCore, error) {
	ret := _m.Called(input)

	var r0 admin.UserCore
	if rf, ok := ret.Get(0).(func(admin.UserCore) admin.UserCore); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(admin.UserCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(admin.UserCore) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllClass provides a mock function with given fields:
func (_m *RepoInterface) GetAllClass() ([]admin.ClassCore, error) {
	ret := _m.Called()

	var r0 []admin.ClassCore
	if rf, ok := ret.Get(0).(func() []admin.ClassCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admin.ClassCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUser provides a mock function with given fields:
func (_m *RepoInterface) GetAllUser() ([]admin.UserCore, []admin.UserCore, error) {
	ret := _m.Called()

	var r0 []admin.UserCore
	if rf, ok := ret.Get(0).(func() []admin.UserCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admin.UserCore)
		}
	}

	var r1 []admin.UserCore
	if rf, ok := ret.Get(1).(func() []admin.UserCore); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]admin.UserCore)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetClass provides a mock function with given fields: id
func (_m *RepoInterface) GetClass(id uint) (admin.ClassCore, error) {
	ret := _m.Called(id)

	var r0 admin.ClassCore
	if rf, ok := ret.Get(0).(func(uint) admin.ClassCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(admin.ClassCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSingleClass provides a mock function with given fields: id
func (_m *RepoInterface) GetSingleClass(id uint) (admin.ClassCore, error) {
	ret := _m.Called(id)

	var r0 admin.ClassCore
	if rf, ok := ret.Get(0).(func(uint) admin.ClassCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(admin.ClassCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSingleMentee provides a mock function with given fields: id
func (_m *RepoInterface) GetSingleMentee(id uint) (admin.UserCore, error) {
	ret := _m.Called(id)

	var r0 admin.UserCore
	if rf, ok := ret.Get(0).(func(uint) admin.UserCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(admin.UserCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSingleMentor provides a mock function with given fields: id
func (_m *RepoInterface) GetSingleMentor(id uint) (admin.UserCore, error) {
	ret := _m.Called(id)

	var r0 admin.UserCore
	if rf, ok := ret.Get(0).(func(uint) admin.UserCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(admin.UserCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertMentee provides a mock function with given fields: input
func (_m *RepoInterface) InsertMentee(input admin.UserCore) (admin.UserCore, error) {
	ret := _m.Called(input)

	var r0 admin.UserCore
	if rf, ok := ret.Get(0).(func(admin.UserCore) admin.UserCore); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(admin.UserCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(admin.UserCore) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertMentor provides a mock function with given fields: input
func (_m *RepoInterface) InsertMentor(input admin.UserCore) (admin.UserCore, error) {
	ret := _m.Called(input)

	var r0 admin.UserCore
	if rf, ok := ret.Get(0).(func(admin.UserCore) admin.UserCore); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(admin.UserCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(admin.UserCore) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertNewClass provides a mock function with given fields: input
func (_m *RepoInterface) InsertNewClass(input admin.ClassCore) (admin.ClassCore, error) {
	ret := _m.Called(input)

	var r0 admin.ClassCore
	if rf, ok := ret.Get(0).(func(admin.ClassCore) admin.ClassCore); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(admin.ClassCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(admin.ClassCore) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepoInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepoInterface creates a new instance of RepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepoInterface(t mockConstructorTestingTNewRepoInterface) *RepoInterface {
	mock := &RepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
