// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	forum "be12/mentutor/features/forum"

	mock "github.com/stretchr/testify/mock"
)

// UseCaseInterface is an autogenerated mock type for the UseCaseInterface type
type UseCaseInterface struct {
	mock.Mock
}

// AddPost provides a mock function with given fields: data, token
func (_m *UseCaseInterface) AddPost(data forum.Status, token int) (int, error) {
	ret := _m.Called(data, token)

	var r0 int
	if rf, ok := ret.Get(0).(func(forum.Status, int) int); ok {
		r0 = rf(data, token)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(forum.Status, int) error); ok {
		r1 = rf(data, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddStatus provides a mock function with given fields: data, token
func (_m *UseCaseInterface) AddStatus(data forum.Status, token int) (forum.Status, error) {
	ret := _m.Called(data, token)

	var r0 forum.Status
	if rf, ok := ret.Get(0).(func(forum.Status, int) forum.Status); ok {
		r0 = rf(data, token)
	} else {
		r0 = ret.Get(0).(forum.Status)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(forum.Status, int) error); ok {
		r1 = rf(data, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPosts provides a mock function with given fields:
func (_m *UseCaseInterface) GetAllPosts() ([]forum.Status, error) {
	ret := _m.Called()

	var r0 []forum.Status
	if rf, ok := ret.Get(0).(func() []forum.Status); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]forum.Status)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUseCaseInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCaseInterface creates a new instance of UseCaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCaseInterface(t mockConstructorTestingTNewUseCaseInterface) *UseCaseInterface {
	mock := &UseCaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
